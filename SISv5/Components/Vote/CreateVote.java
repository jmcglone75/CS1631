import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class CreateVote
{

    // socket for connection to SISServer
    static Socket universal;
    private static int port = 53217;
    // message writer
    static MsgEncoder encoder;
    // message reader
    static MsgDecoder decoder;
    // scope of this component
    private static final String SCOPE = "SIS.Scope1";
	// name of this component
    private static final String NAME = "Vote";
    // messages types that can be handled by this component
    private static final List<String> TYPES = new ArrayList<String>(
        Arrays.asList(new String[] { "Reading", "Alert", "Confirm",
                    "Connect", "Setting"}));

    private static int refreshRate = 1000, max = 40, min = 15;
    private static Date startDate = new Date(), endDate = new Date();
    private static Timer timer = new Timer();

    // shared by all kinds of records that can be generated by this component
    private static KeyValueList record = new KeyValueList();
    // shared by all kinds of alerts that can be generated by this component
    private static KeyValueList alert = new KeyValueList();

    /*
     * Main program
     */
    public static void main(String[] args)
    {
        while (true)
        {
            try
            {

                // try to establish a connection to SISServer
                universal = connect();

                // bind the message reader to inputstream of the socket
                decoder = new MsgDecoder(universal.getInputStream());
                // bind the message writer to outputstream of the socket
                encoder = new MsgEncoder(universal.getOutputStream());

                /*
                 * construct a Connect message to establish the connection
                 */
                 
                KeyValueList conn = new KeyValueList();
                conn.putPair("Scope", SCOPE);
                conn.putPair("MessageType", "Register");
                conn.putPair("Role","Basic");
                conn.putPair("Name", NAME);
                encoder.sendMsg(conn);
                
                conn = new KeyValueList();
                conn.putPair("Scope", SCOPE);
                conn.putPair("MessageType", "Connect");
				conn.putPair("Role", "Basic");
                conn.putPair("Name", NAME);
                encoder.sendMsg(conn);

                initRecord();

                // KeyValueList for inward messages, see KeyValueList for
                // details
                KeyValueList kvList;

                while (true)
                {
                    // attempt to read and decode a message, see MsgDecoder for
                    // details
                    kvList = decoder.getMsg();

                    // process that message
                    ProcessMsg(kvList);
                }

            }
            catch (Exception e)
            {
                // if anything goes wrong, try to re-establish the connection
                e.printStackTrace();
                try
                {
                    // wait for 1 second to retry
                    Thread.sleep(1000);
                }
                catch (InterruptedException e2)
                {
                }
                System.out.println("Try to reconnect");
                try
                {
                    universal = connect();
                }
                catch (IOException e1)
                {
                }
            }
        }
    }

    /*
     * used for connect(reconnect) to SISServer
     */
    static Socket connect() throws IOException
    {
        Socket socket = new Socket("127.0.0.1", port);
        return socket;
    }

    private static void initRecord()
    {
        record.putPair("Scope", SCOPE);
        record.putPair("MessageType", "Reading");
        record.putPair("Sender", NAME);

        // Receiver may be different for each message, so it doesn't make sense
        // to set here
        // record.putPair("Receiver", "");

        alert.putPair("Scope", SCOPE);
        alert.putPair("MessageType", "Alert");
        alert.putPair("Sender", NAME);
        alert.putPair("Purpose", "TestAlert");

        // Receiver may be different for each message, so it doesn't make sense
        // to set here
        // alert.putPair("Receiver", "");
    }

    /*private static void componentTask()
     {
        try
        {
            collect();
			
			if (reading.temp > min && reading.temp < max) {//normal
				//reading
				reading.date = System.currentTimeMillis();
				record.putPair("Temp", reading.temp + "");
				record.putPair("Date", reading.date + "");
				//send reading message to GUI, uploader
				encoder.sendMsg(record);
				//send reading message to controller
				record.putPair("Receiver", "DiController");
				encoder.sendMsg(record);
				record.removePair("Receiver");
			} else { //alert
				reading.date = System.currentTimeMillis(); //[Duncan Add Nov 16]
				alert.putPair("Temp", reading.temp + "");
				alert.putPair("Date", reading.date + "");
				//send alert message to GUI, uploader
				alert.removePair("Receiver");//[Duncan Add Nov 16]
				alert.putPair("Receiver", "DiUploader");//[Duncan Add Nov 16]
                		encoder.sendMsg(alert);
				//send alert message to controller
				alert.removePair("Receiver");
				alert.putPair("Receiver", "DiController");
                encoder.sendMsg(alert);
			}
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }*/

    private static void ProcessMsg(KeyValueList kvList) throws Exception
    {

        /*String scope = kvList.getValue("Scope");
        if (!SCOPE.startsWith(scope))
        {
            return;
        }

        String messageType = kvList.getValue("MessageType");
        if (!TYPES.contains(messageType))
        {
            return;
        }*/

        String sender = kvList.getValue("Sender");
        String type = kvList.getValue("MessageType");
        String receiver = kvList.getValue("Receiver");
        
        System.out.println("Message successfully received");
        System.out.println("Sender: " + sender);
        System.out.println("Receiver: " + receiver);
        
        //send back to confirm
        KeyValueList back = new KeyValueList();
        back.putPair("Scope", SCOPE);
        back.putPair("MessageType", "Confirm");
        back.putPair("Role","Basic");
        back.putPair("Name", NAME);
        encoder.sendMsg(back);

        switch (type)
        {
        case "Confirm":
            System.out.println("Connect to SISServer successful.");
            break;
        case "Setting":
            back = new KeyValueList();
			back.putPair("Scope", SCOPE);
			back.putPair("MessageType", "Alert");
			back.putPair("Sender",NAME);
			back.putPair("Receiver", "SISRemote");
			encoder.sendMsg(back);
			break;
        }
    }

    /*private static void collect() throws Exception
    {
        Runtime rt = Runtime.getRuntime();
        String comm = "tempered.exe";
        Process proc = rt.exec(comm);

        BufferedReader std = new BufferedReader(new InputStreamReader(proc.getInputStream()));
        //BufferedReader err = new BufferedReader(new InputStreamReader(proc.getErrorStream()));

        String s = null;
        //int count = 0;
        while((s = std.readLine()) != null)
        {
            try
            {
				//System.out.println(s);
                reading.temp = Double.parseDouble(s);
				//System.out.println(reading.temp);
                //++count;
            }
            catch(Exception e) {}
        }
        //reading.temp /= count;
		System.out.println(reading.temp);
    }*/

}
